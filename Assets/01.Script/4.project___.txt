매니저 구조
	어떤 오브젝트라도 Public 변수를 사용하지 않고 연결된 모든 객체와 상호작용 가능하도록 해준다.
	싱글톤 패턴과 함께 사용해 접근 가능하다.

적 구조
    Enemy스크립트에서 죽음이나 피격 등의 처리를 한다.
	+
	특별히 겹치면 귀찮은 함수나 변수가 없는걸로 보아, EnemyPattern에서 상속받는 구조로 바꿔도 문제없지 않을까?

보스 구조
	인덱스 변수와 스위치를 통해 패턴의 확장성을 확보하였다.
	+
	프레임 단위 호출이 아니라 큰 상관은 없지만, 비교적 자원을 많이먹는 Invoke를 전부 코루틴으로 대체,
	보스B는 A를 상속받아 패턴 부분은 base 없는 오버라이드로 구현했다.
	현재 패턴 구현부에 시간을 하나씩 재가며 움직임을 제어하다보니 가독성이 나쁘다.
	(Dotween쓰고싶다.) 비슷한 구조다 싶은 부분들을 함수로 전부 바꾸는게 좋을듯하다.
	ShootProjectile에 기본 매개변수를 몇가지 추가하여, 유동적으로 사용할수 있다.

플레이어 구조
    스킬 딕셔너리에 enum키와 같이 각 스킬이 가지고 있는 BaseSkill클래스를 값으로 넣어
	스킬 컴포넌트를 하나하나 참조하지 않고도 일괄적으로 관리할 수 있다.
	이외에도 스킬 스크립트를 담은 프리팹의 이름을 검사할 수도 있으나, 딕셔너리가 확실히 효율적인 방법이다.

일반공격 구조
	Weapon인터페이스를 만들어, 각기 다른 클래스들을 편하게 하나의 배열에 담을수 있다.
	따라서, 현재 스킬 레벨 변수를 인덱스로 사용해 레벨에 따른 공격 클래스를 자동으로 호출할 수 있다.
	+
	공격을 실행할 때, 항상 캐릭터매니저를 통해 플레이어스크립트 컴포넌트를 가져와 레벨을 참조한다.
	이에 관해 변수에 클래스를 저장해두는게 성능상 좋지 않을까 했지만, 조사한 결과 업데이트 문에 넣어도 될 정도로
	별 영향을 끼치지 않는다고 한다.

탄환 구조
	적과 플레이어 모두 사용할 수 있도록 공통부분을 구현하고, 프리팹의 태그를 통해 각자 추가 구현이 가능하다.
	+
	값을 넣지 않을 시 영향받지 않도록 태그 구분만으로 구현할수 없는 부분을 추가했다.

GameInstance 구조
	스테이지가 넘어갔을 때에도 기존의 정보를 저장하기 위해, 필요한 값을 사용하는 객체들은 start와 init 등에서
	GameInstance 내부의 변수들을 불러와 업데이트시키고, 실제 값이 바뀔 때마다 GameInstance의 변수를 업데이트시켜
	정보를 교환한다.
	+
	그저 사용하는 변수를 static으로 선언해도 비슷한 효과를 낼 수 있을듯하지만,
	가독성과 관리 면에서 이쪽이 훨씬 좋아보인다.



Other
	대부분의 코루틴을 함수를 바로 호출해 사용했지만, freeze구현에서 코루틴을 중복으로 사용한 적이 있다면
	구조를 조금 건들여야 했을 것이다.
	확실하게 단일로 재생된다는 보장이 없다면, 원활한 중지와 재생을 위해 Coroutine변수로 지정해주는게 좋을 듯 하다.